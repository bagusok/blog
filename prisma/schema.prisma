generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String
  bio       String?
  role      Role     @default(AUTHOR)
  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now())
  post      Post[]
}

model Post {
  id              Int         @id @default(autoincrement())
  title           String?
  slug            String      @unique
  metaTitle       String?
  metaDescription String?
  body            String?
  thumbnail       String?
  author          User?       @relation(fields: [authorUserName], references: [username], onDelete: Cascade, onUpdate: Cascade)
  authorUserName  String
  categories      Categories  @relation(fields: [categoriesName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  categoriesName  String
  tag             TagOnPost[]
  isPublished     Boolean     @default(false)
  publishedAt     DateTime?
  createdAt       DateTime    @default(now())
}

model Categories {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Tag {
  id   Int         @id @default(autoincrement())
  name String      @unique
  post TagOnPost[]
}

model TagOnPost {
  id      Int    @id @default(autoincrement())
  post    Post?  @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postID  Int
  tag     Tag?   @relation(fields: [tagName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  tagName String
}

enum Role {
  ADMIN
  AUTHOR
}

// Site Config

// model Navbar {
//   id    Int           @id @default(autoincrement())
//   name  String        @unique
//   url   String?
//   icon  String?
//   child NavbarChild[]
// }

// model NavbarChild {
//   id       Int     @id @default(autoincrement())
//   name     String
//   url      String?
//   parent   Navbar? @relation(fields: [parentID], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   parentID Int
// }

model SiteSetting {
  id          Int      @id @default(autoincrement())
  siteName    String   @unique
  siteUrl     String
  siteLogo    String[]
  siteFavicon String[]

  uploadFileProvider UPLOAD_PROVIDER @default(S3)
}

enum UPLOAD_PROVIDER {
  S3
  CLOUDINARY
}

model Pages {
  id              Int       @id @default(autoincrement())
  title           String?
  slug            String    @unique
  metaTitle       String?
  metaDescription String?
  body            String?
  script          String?
  style           String?
  thumbnail       String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
}

model NavbarCategory {
  id   Int          @id @default(autoincrement())
  name String       @default("")
  menu NavbarItem[]
}

model NavbarItem {
  id               Int               @id @default(autoincrement())
  name             String
  url              String?
  icon             String?
  navbarCategory   NavbarCategory?   @relation(fields: [navbarCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  navbarCategoryId Int?
  navbarItemChild  NavbarItemChild[]
}

model NavbarItemChild {
  id           Int         @id @default(autoincrement())
  name         String
  url          String?
  navbarItem   NavbarItem? @relation(fields: [navbarItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  navbarItemId Int?
}
